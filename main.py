import os
import whisper
import ffmpeg
import easyocr
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ContentType
from aiogram.filters import Command
from aiogram.types import Message, FSInputFile
from aiogram.fsm.storage.memory import MemoryStorage

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π
whisper_model = whisper.load_model("small")
reader = easyocr.Reader(['ru'])

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
BOT_TOKEN = "7051450602:AAFltVCU1XL1AyCvpWD5XeEoHV1ROfuts4Y"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())


# ========== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ==========
@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç-–∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä!\n\n"
        "<b>–Ø —É–º–µ—é:</b>\n"
        "‚Ä¢ üîä –ê—É–¥–∏–æ ‚Üí —Ç–µ–∫—Å—Ç\n"
        "‚Ä¢ üé• –í–∏–¥–µ–æ ‚Üí —Ç–µ–∫—Å—Ç\n"
        "‚Ä¢ üì∏ –§–æ—Ç–æ ‚Üí —Ç–µ–∫—Å—Ç\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–∞–π–ª –Ω—É–∂–Ω–æ–≥–æ —Ç–∏–ø–∞!",
        parse_mode="HTML"
    )


# ========== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–∞–π–ª–æ–≤ ==========
@dp.message(lambda m: m.content_type == ContentType.AUDIO)
async def handle_audio(message: Message):
    try:
        file = await bot.get_file(message.audio.file_id)
        file_path = f"temp_{message.audio.file_id}.mp3"

        await bot.download_file(file.file_path, destination=file_path)
        text = await asyncio.to_thread(audio_to_text, file_path)

        os.remove(file_path)
        await message.reply(f"üîä –¢–µ–∫—Å—Ç:\n{text}")
    except Exception as e:
        await message.reply(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ: {str(e)}")


@dp.message(lambda m: m.content_type == ContentType.VIDEO)
async def handle_video(message: Message):
    try:
        file = await bot.get_file(message.video.file_id)
        file_path = f"temp_{message.video.file_id}.mp4"

        await bot.download_file(file.file_path, destination=file_path)
        text = await asyncio.to_thread(video_to_text, file_path)

        os.remove(file_path)
        await message.reply(f"üé• –¢–µ–∫—Å—Ç –∏–∑ –≤–∏–¥–µ–æ:\n{text}")
    except Exception as e:
        await message.reply(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ: {str(e)}")


@dp.message(lambda m: m.content_type == ContentType.PHOTO)
async def handle_photo(message: Message):
    try:
        file = await bot.get_file(message.photo[-1].file_id)
        file_path = f"temp_{message.photo[-1].file_id}.jpg"

        await bot.download_file(file.file_path, destination=file_path)
        text = await asyncio.to_thread(image_to_text, file_path)

        os.remove(file_path)
        await message.reply(f"üì∏ –¢–µ–∫—Å—Ç –Ω–∞ —Ñ–æ—Ç–æ:\n{text}")
    except Exception as e:
        await message.reply(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {str(e)}")


# ========== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ==========
def audio_to_text(audio_path: str) -> str:
    result = whisper_model.transcribe(audio_path, language="ru")
    return result["text"]


def video_to_text(video_path: str) -> str:
    audio_path = "temp_audio.mp3"
    ffmpeg.input(video_path).output(audio_path, ac=1, ar=16000).run(quiet=True)
    text = audio_to_text(audio_path)
    os.remove(audio_path)
    return text


def image_to_text(image_path: str) -> str:
    result = reader.readtext(image_path, detail=0, paragraph=True)
    return "\n".join(result)


# ========== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ==========
async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
